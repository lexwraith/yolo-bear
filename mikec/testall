#!/usr/bin/env python
from __future__ import print_function
import argparse
import os

from pprint import pprint
from subprocess import call, Popen, STDOUT, PIPE


pt = lambda x,y: print("\033[%sm%s\033[0m" % (30 + x,y)) # Where 0 <= x <= 7

parser = argparse.ArgumentParser(description="Super testing suite for MilliC")
parser.add_argument('--nomillic', help='Disables makefile error messages', action="store_true")
parser.add_argument('--nogcc', help="Does full compile but no running", action="store_true")
parser.add_argument('--noclean', help='Disable cleanup post run', action="store_true")
flags = parser.parse_args()

def getTestPaths():
    allPaths = []
    current = os.getcwd()
    print(current)
    for tup in os.walk('./tests'):
        for test in tup[2]:
            allPaths.append(current + tup[0][1:] + '/' + test)
    allPaths = filter(lambda x: x[-2:] == 'mc', allPaths)
    return allPaths

def setup():
    show = False if flags.nomillic else True
    try:
        call(['make'])
    except Exception as e:
        pt(1, "Make failed:%s" % e)

def test(filepath):
    try:
        target = './microc -C < %s' % filepath
        Popen([target], shell = True)
    except Exception as e:
        pt(4, "Failed MilliC %s:%s" % (filepath,e))
    if flags.nogcc:
        return
    try:
        target = 'gcc -o %s %s' % (filepath[filepath.rfind('/'):] + ".exe" , filepath)
        Popen([target], shell = True)
    except Exception as e:
        pt(3, "Failed GCC %s:%s" % (filepath,e))

if __name__ == "__main__":
    setup() 
    for t in getTestPaths():
        test(t)
    if not flags.noclean:
        call(['make','clean'])
