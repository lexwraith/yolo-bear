OBJS = ast.cmo parser.cmo scanner.cmo interpret.cmo bytecode.cmo \
	 microc.cmo

TESTS = add_matrix add_n_numbers \
	bubblesort dynprogfibo \
	even_or_odd fibonacci \
	stirng_array \
	helloworld1 helloworld2 helloworld3 helloworld4 helloworld5

TARFILES = Makefile testall.sh scanner.mll parser.mly \
	ast.ml bytecode.ml interpret.ml  microc.ml \
	$(TESTS:%=tests/test-%.civ) \
	$(TESTS:%=tests/test-%.out)

microc : $(OBJS)
	ocamlc -o microc $(OBJS)

.PHONY : test
test : microc testall.sh
	./testall.sh

scanner.ml : scanner.mll
	ocamllex scanner.mll

parser.ml parser.mli : parser.mly
	ocamlyacc parser.mly

%.cmo : %.ml
	ocamlc -w A -c $<

%.cmi : %.mli
	ocamlc -w A -c $<

microc.tar.gz : $(TARFILES)
	cd .. && tar czf microc/microc.tar.gz $(TARFILES:%=microc/%)

.PHONY : clean
clean :
	rm -f microc parser.ml parser.mli scanner.ml testall.log \
	*.cmo *.cmi *.out *.diff

# Generated by ocamldep *.ml *.mli
ast.cmo: 
ast.cmx: 
bytecode.cmo: ast.cmo 
bytecode.cmx: ast.cmx 

interpret.cmo: ast.cmo 
interpret.cmx: ast.cmx 
microc.cmo: scanner.cmo parser.cmi interpret.cmo \
    bytecode.cmo ast.cmo 
microc.cmx: scanner.cmx parser.cmx interpret.cmx \
    bytecode.cmx ast.cmx 
parser.cmo: ast.cmo parser.cmi 
parser.cmx: ast.cmx parser.cmi 
scanner.cmo: parser.cmi 
scanner.cmx: parser.cmx 
parser.cmi: ast.cmo 
